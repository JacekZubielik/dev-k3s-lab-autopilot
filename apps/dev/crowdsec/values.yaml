container_runtime: containerd
# Here you can specify your own custom configuration to be loaded in crowdsec agent or lapi
# Each config needs to be a multi-line using '|' in YAML specs
# for the agent those configs will be loaded : parsers, scenarios, postoverflows, simulation.yaml
# for the lapi those configs will be loaded : profiles.yaml, notifications, console.yaml
config:
  profiles.yaml: |
    name: default_ip_remediation
    #debug: true
    filters:
     - Alert.Remediation == true && Alert.GetScope() == "Ip"
    decisions:
     - type: ban
       duration: 4h
    #duration_expr: Sprintf('%dh', (GetDecisionsCount(Alert.GetValue()) + 1) * 4)
    notifications:
    #   - slack_default  # Set the webhook in /etc/crowdsec/notifications/slack.yaml before enabling this.
    #   - splunk_default # Set the splunk url and token in /etc/crowdsec/notifications/splunk.yaml before enabling this.
      - http_default   # Set the required http parameters in /etc/crowdsec/notifications/http.yaml before enabling this.
    #   - email_default  # Set the required email parameters in /etc/crowdsec/notifications/email.yaml before enabling this.
  notifications:
    http.yaml: |
      type: http          # Don't change
      name: http_default # Must match the registered plugin in the profile

      # One of "trace", "debug", "info", "warn", "error", "off"
      log_level: info

      # group_wait:         # Time to wait collecting alerts before relaying a message to this plugin, eg "30s"
      # group_threshold:    # Amount of alerts that triggers a message before <group_wait> has expired, eg "10"
      # max_retry:          # Number of attempts to relay messages to plugins in case of error
      # timeout:            # Time to wait for response from the plugin before considering the attempt a failure, eg "10s"

      #-------------------------
      # plugin-specific options

      # The following template receives a list of models.Alert objects
      # The output goes in the http request body
      format: |
        {{ range . -}}
        {{ $alert := . -}}
        {
          "extras": {
            "client::display": {
            "contentType": "text/markdown"
          }
        },
        "priority": 3,
        {{range .Decisions -}}
        "title": "{{.Type }} {{ .Value }} for {{.Duration}}",
        "message": "{{.Scenario}}  \n\n[crowdsec cti](https://app.crowdsec.net/cti/{{.Value -}})  \n\n[shodan](https://shodan.io/host/{{.Value -}})"
        {{end -}}
        }
        {{ end -}}

      # The plugin will make requests to this url, eg:  https://www.example.com/
      url: https://gotify.YOUR-DOMAIN.COM/message

      # Any of the http verbs: "POST", "GET", "PUT"...
      method: POST

      headers:
        X-Gotify-Key: YOUR-KEY
        Content-Type: application/json
        skip_tls_verification: true
tls:
  enabled: true
  bouncer:
    reflector:
      namespaces: ["traefik"]
      # nodeSelector:
      #   worker: "true"
    # crowdsec_bouncer_api_key:
    # crowdsec_agent_host: "crowdsec-service.default.svc.cluster.local:8080"
    # crowdsec_bouncer_gin_mode: "release"
    certManager:
      enabled: true
# image:
#   pullPolicy: Always
agent:
  acquisition:
    - namespace: traefik
      podName: traefik-*
      program: traefik
    # - namespace: monitoring
    #   podName: grafana-*
    #   program: grafana
    # - namespace: authentik
    #   podName: authentik-*
    #   program: authentik
  # tolerations:
  # - key: node-role.kubernetes.io/control-plane
  #   operator: Equal
  #   effect: NoSchedule
  # Specify each pod whose logs you want to process
  env:
  # - name: DISABLE_ONLINE_API
  #   value: "true"
  # - name: PARSERS
  #   value: "crowdsecurity/cri-logs crowdsecurity/whitelists"
  - name: COLLECTIONS
    value: "crowdsecurity/linux crowdsecurity/traefik"
  - name: TZ
    value: "CET"
    # When testing, allow bans on private networks
    #- name: DISABLE_PARSERS
    #  value: "crowdsecurity/whitelists"
  persistentVolume:
    config:
      enabled: true
      accessModes:
      - ReadWriteOnce
      storageClassName: "longhorn-retain-data"
      size: 100Mi
  # nodeSelector:
  #   worker: "true"
  image:
    pullPolicy: Always
lapi:
  dashboard:
    enabled: false
    ingress:
      host: dashboard.local
      enabled: true
  # persistentVolume:
  #   config:
  #     enabled: false

  persistentVolume:
    # -- Persistent volume for data folder. Stores e.g. registered bouncer api keys
    data:
      enabled: true
      accessModes:
      - ReadWriteOnce
      storageClassName: "longhorn-retain-data"
      size: 1Gi
    # -- Persistent volume for config folder. Stores e.g. online api credentials
    config:
      enabled: true
      accessModes:
      - ReadWriteOnce
      storageClassName: "longhorn-retain-data"
      size: 100Mi
      # existingClaim: "crowdsec-agent-config"
  resources:
    limits:
      memory: 200Mi
    requests:
      cpu: 250m
      memory: 200Mi
  env:
  - name: DISABLE_ONLINE_API # For an internal test, disable the Online API by setting 'DISABLE_ONLINE_API' to "true"
    value: "true" # "false"
  # - name: ENROLL_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: crowdsec # "YOUR-CLOUD-API-KEY"
  #       key: ENROLL_KEY
  # - name: BOUNCER_KEY_traefik
  #   valueFrom:
  #     secretKeyRef:
  #       name: crowdsec
  #       key: BOUNCER_KEY_TRAEFIK
  - name: ENROLL_INSTANCE_NAME
    value: "homelab"
  - name: ENROLL_TAGS
    value: "homelab"
  # nodeSelector:
  #   worker: "true"


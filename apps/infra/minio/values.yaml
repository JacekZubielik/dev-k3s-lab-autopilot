# minio helm values (base)

mode: standalone ## other supported values are "standalone" "distributed"

image:
  repository: quay.io/minio/minio
  tag: RELEASE.2024-10-02T17-50-41Z
  pullPolicy: IfNotPresent

mcImage:
  repository: quay.io/minio/mc
  tag: RELEASE.2024-10-02T08-27-28Z
  pullPolicy: IfNotPresent


## Typically the deployment/statefulset includes checksums of secrets/config,
## So that when these change on a subsequent helm install, the deployment/statefulset
## is restarted. This can result in unnecessary restarts under GitOps tooling such as
## flux, so set to "true" to disable this behaviour.
ignoreChartChecksums: false
minioAPIPort: "9000"
minioConsolePort: "9001"

deploymentUpdate:
  type: RollingUpdate
  maxUnavailable: 0
  maxSurge: 100%

## Update strategy for StatefulSets
statefulSetUpdate:
  updateStrategy: RollingUpdate

existingSecret: "minio-secret"

## Directory on the MinIO pof
certsPath: "/etc/minio/certs/"
configPathmc: "/etc/minio/mc/"

extraArgs:
- --ftp=\"address=:8021\"
- --ftp=\"passive-port-range=30000-30005\"

environment:
  ## Please refer for comprehensive list https://min.io/docs/minio/linux/reference/minio-server/minio-server.html
  MINIO_API_ROOT_ACCESS: "on"
  MINIO_API_SYNC_EVENTS: "on"
  MINIO_BROWSER_LOGIN_ANIMATION: "off"
  MINIO_BROWSER: "on"
  MINIO_NOTIFY_MQTT_ENABLE: "on"
  MINIO_PROMETHEUS_JOB_ID: "minio-job"
  MINIO_PROMETHEUS_URL: http://kube-prometheus-stack-prometheus.monitoring:9090
  MINIO_REGION_NAME: "us-east-1"
  MINIO_SITE_NAME: "wd-rack-1"

## Path where PV would be mounted on the MinIO Pod
mountPath: "/s3minio"
## Override the root directory which the minio server should serve from.
## If left empty, it defaults to the value of {{ .Values.mountPath }}
## If defined, it must be a sub-directory of the path specified in {{ .Values.mountPath }}
bucketRoot: ""

# Number of drives attached to a node
drivesPerNode: 1
# Number of MinIO containers running
replicas: 1
# Number of expanded MinIO clusters
pools: 1

## TLS Settings for MinIO
tls:
  enabled: false
  ## Create a secret with private.key and public.crt files and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
  certSecret: ""
  publicCrt: public.crt
  privateKey: private.key

## Trusted Certificates Settings for MinIO. Ref: https://min.io/docs/minio/linux/operations/network-encryption.html#third-party-certificate-authorities
## Bundle multiple trusted certificates into one secret and pass that here. Ref: https://github.com/minio/minio/tree/master/docs/tls/kubernetes#2-create-kubernetes-secret
## When using self-signed certificates, remember to include MinIO's own certificate in the bundle with key public.crt.
## If certSecret is left empty and tls is enabled, this chart installs the public certificate from .Values.tls.certSecret.
trustedCertsSecret: ""

persistence:
  enabled: enable
  storageClass: nfs-storage
  accessModes: ReadWriteMany
  volumeName: pv-minio
  volumeMode: Filesystem
  size: 160Gi
  # persistentVolumeClaimRetentionPolicy:
  #   enabled: true
  #   whenScaled: Retain
  #   whenDeleted: Retain

service:
  type: LoadBalancer
  clusterIP: ~
  port: 9000
  nodePort: 32000
  loadBalancerIP: "192.168.40.187"
  externalIPs: []
  annotations: {}

consoleService:
  type: LoadBalancer
  clusterIP: ~
  port: 9001
  nodePort: 32001
  loadBalancerIP: "192.168.40.187"
  externalIPs: []
  annotations: {}

nodeSelector: {}
#   kubernetes.io/hostname: dev-k3s-master-0
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/arch
          operator: In
          values:
          - amd64

## Add stateful containers to have security context, if enabled MinIO will run as this
## user and group NOTE: securityContext is only enabled if persistence.enabled=true
securityContext:
  enabled: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  fsGroupChangePolicy: "OnRootMismatch"

# Additational pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: "/minio/v2/metrics/cluster"
  prometheus.io/port: "9090"
  prometheus.io/scrap-with: kube-prometheus-stack-prometheus

resources:
  requests:
    memory: 0.8Gi
  limits:
    memory: 1.2Gi

# Minio Buckets bucket [true|false] NOTE: versioning is enabled by default if you use locking
buckets:
- name: k3s-authentik
  objectlocking: false
  policy: private
  purge: false
  versioning: false

- name: k3s-data
  objectlocking: false
  policy: private
  purge: false
  versioning: false

- name: k3s-loki
  objectlocking: false
  policy: private
  purge: false
  versioning: false

- name: k3s-longhorn
  objectlocking: false
  policy: private
  purge: false
  versioning: false

- name: k3s-media
  objectlocking: false
  policy: private
  purge: false
  versioning: false

- name: k3s-tempo
  objectlocking: false
  policy: private
  purge: false
  versioning: false

- name: k3s-velero
  objectlocking: false
  policy: private
  purge: false
  versioning: false

users:
- accessKey: authentik
  existingSecret: minio-secret
  existingSecretKey: authentikPassword
  policy: k3s-authentik

- accessKey: data
  existingSecret: minio-secret
  existingSecretKey: dataPassword
  policy: k3s-data

- accessKey: loki
  existingSecret: minio-secret
  existingSecretKey: lokiPassword
  policy: k3s-loki

- accessKey: longhorn
  existingSecret: minio-secret
  existingSecretKey: longhornPassword
  policy: k3s-longhorn

- accessKey: prometheus
  existingSecret: minio-secret
  existingSecretKey: prometheusPassword
  policy: k3s-prometheus

- accessKey: rabbit
  existingSecret: minio-secret
  existingSecretKey: rabbitPassword
  policy: k3s-rabbit

- accessKey: media
  existingSecret: minio-secret
  existingSecretKey: mediaPassword
  policy: k3s-media

- accessKey: tempo
  existingSecret: minio-secret
  existingSecretKey: tempoPassword
  policy: k3s-tempo

- accessKey: velero
  existingSecret: minio-secret
  existingSecretKey: veleroPassword
  policy: k3s-velero

# ## Additional Annotations for the Kubernetes Job makeUserJob
# makeUserJob:
#   securityContext:
#     enabled: false
#     runAsUser: 1000
#     runAsGroup: 1000
#   resources:
#     requests:
#       memory: 128Mi
#   # Command to run after the main command on exit
#   exitCommand: ""

svcaccts:
- accessKey: ZRg6hcQlT1BFeGVw3i9U
  existingSecret: minio-secret
  existingSecretKey: authentikSecretKey
  user: authentik

- accessKey: Yt7ZLHXCE3Uc4tzMdbH8
  existingSecret: minio-secret
  existingSecretKey: dataSecretKey
  user: data

- accessKey: QlUdDdVFiw9W9Fer9698
  existingSecret: minio-secret
  existingSecretKey: lokiSecretKey
  user: loki

- accessKey: yhNtvIOKVDVkJ4HX9GwP
  existingSecret: minio-secret
  existingSecretKey: longhornSecretKey
  user: longhorn

- accessKey: rXAX3JIFn2m9Zxtmiakk
  existingSecret: minio-secret
  existingSecretKey: prometheusSecretKey
  user: prometheus

- accessKey: s5gIGW0bx3QE0ottkGKd
  existingSecret: minio-secret
  existingSecretKey: rabbitSecretKey
  user: rabbit

- accessKey: ZaNGf7eIylvEK1pU9vuv
  existingSecret: minio-secret
  existingSecretKey: mediaSecretKey
  user: media

- accessKey: Zxk4Wy88hOtBGK8iKFCO
  existingSecret: minio-secret
  existingSecretKey: tempoSecretKey
  user: tempo

- accessKey: oEDPuwVCiXhe2lWCAAAF
  existingSecret: minio-secret
  existingSecretKey: veleroSecretKey
  user: velero

policies:
- name: k3s-authentik
  statements:
    - effect: Allow
      resources:
        - 'arn:aws:s3:::k3s-authentik*/*'
      actions:
        - "s3:AbortMultipartUpload"
        - "s3:GetObject"
        - "s3:DeleteObject"
        - "s3:PutObject"
        - "s3:ListMultipartUploadParts"
    - resources:
        - 'arn:aws:s3:::k3s-authentik*'
      actions:
        - "s3:CreateBucket"
        - "s3:DeleteBucket"
        - "s3:GetBucketLocation"
        - "s3:ListBucket"
        - "s3:ListBucketMultipartUploads"
      conditions:
        - StringEquals: '"aws:username": "authentik"'
        - IpAddress: |
            "aws:SourceIp": [
              "10.0.0.0/8",
              "192.168.40.0/24"
            ]

- name: k3s-data
  statements:
    - effect: Allow
      resources:
        - 'arn:aws:s3:::k3s-data*/*'
      actions:
        - "s3:AbortMultipartUpload"
        - "s3:GetObject"
        - "s3:DeleteObject"
        - "s3:PutObject"
        - "s3:ListMultipartUploadParts"
    - resources:
        - 'arn:aws:s3:::k3s-data*'
      actions:
        - "s3:CreateBucket"
        - "s3:DeleteBucket"
        - "s3:GetBucketLocation"
        - "s3:ListBucket"
        - "s3:ListBucketMultipartUploads"
      conditions:
        - StringEquals: '"aws:username": "data"'
        - IpAddress: |
            "aws:SourceIp": [
              "10.0.0.0/8",
              "192.168.40.0/24"
            ]

- name: k3s-loki
  statements:
    - effect: Allow
      resources:
        - 'arn:aws:s3:::k3s-loki*/*'
      actions:
        - "s3:AbortMultipartUpload"
        - "s3:GetObject"
        - "s3:DeleteObject"
        - "s3:PutObject"
        - "s3:ListMultipartUploadParts"
    - resources:
        - 'arn:aws:s3:::k3s-loki*'
      actions:
        - "s3:CreateBucket"
        - "s3:DeleteBucket"
        - "s3:GetBucketLocation"
        - "s3:ListBucket"
        - "s3:ListBucketMultipartUploads"
      conditions:
        - StringEquals: '"aws:username": "loki"'
        - IpAddress: |
            "aws:SourceIp": [
              "10.0.0.0/8",
              "192.168.40.0/24"
            ]

- name: k3s-longhorn
  statements:
    - effect: Allow
      resources:
        - 'arn:aws:s3:::k3s-longhorn*/*'
      actions:
        - "s3:AbortMultipartUpload"
        - "s3:GetObject"
        - "s3:DeleteObject"
        - "s3:PutObject"
        - "s3:ListMultipartUploadParts"
    - resources:
        - 'arn:aws:s3:::k3s-longhorn*'
      actions:
        - "s3:CreateBucket"
        - "s3:DeleteBucket"
        - "s3:GetBucketLocation"
        - "s3:ListBucket"
        - "s3:ListBucketMultipartUploads"
      conditions:
        - StringEquals: '"aws:username": "longhorn"'
        - IpAddress: |
            "aws:SourceIp": [
              "10.0.0.0/8",
              "192.168.40.0/24"
            ]

- name: k3s-prometheus
  statements:
    - effect: Allow
      resources:
        - 'arn:aws:s3:::*/*'
      actions:
        - "s3:AbortMultipartUpload"
        - "s3:GetObject"
        - "s3:DeleteObject"
        - "s3:PutObject"
        - "s3:ListMultipartUploadParts"
    - resources:
        - 'arn:aws:s3:::*'
      actions:
        - "s3:CreateBucket"
        - "s3:DeleteBucket"
        - "s3:GetBucketLocation"
        - "s3:ListBucket"
        - "s3:ListBucketMultipartUploads"
      conditions:
        - StringEquals: '"aws:username": "prometheus"'
        - IpAddress: |
            "aws:SourceIp": [
              "10.0.0.0/8",
              "192.168.40.0/24"
            ]

- name: k3s-rabbit
  statements:
    - effect: Allow
      resources:
        - 'arn:aws:s3:::*/*'
      actions:
        - "s3:AbortMultipartUpload"
        - "s3:GetObject"
        - "s3:DeleteObject"
        - "s3:PutObject"
        - "s3:ListMultipartUploadParts"
    - resources:
        - 'arn:aws:s3:::*'
      actions:
        - "s3:CreateBucket"
        - "s3:DeleteBucket"
        - "s3:GetBucketLocation"
        - "s3:ListBucket"
        - "s3:ListBucketMultipartUploads"
      conditions:
        - StringEquals: '"aws:username": "rabbit"'
        - IpAddress: |
            "aws:SourceIp": [
              "10.0.0.0/8",
              "192.168.40.0/24"
            ]

- name: k3s-media
  statements:
    - effect: Allow
      resources:
        - 'arn:aws:s3:::k3s-media*/*'
      actions:
        - "s3:AbortMultipartUpload"
        - "s3:GetObject"
        - "s3:DeleteObject"
        - "s3:PutObject"
        - "s3:ListMultipartUploadParts"
    - resources:
        - 'arn:aws:s3:::k3s-media*'
      actions:
        - "s3:CreateBucket"
        - "s3:DeleteBucket"
        - "s3:GetBucketLocation"
        - "s3:ListBucket"
        - "s3:ListBucketMultipartUploads"
      conditions:
        - StringEquals: '"aws:username": "media"'
        - IpAddress: |
            "aws:SourceIp": [
              "10.0.0.0/8",
              "192.168.40.0/24"
            ]

- name: k3s-tempo
  statements:
    - effect: Allow
      resources:
        - 'arn:aws:s3:::k3s-tempo*/*'
      actions:
        - "s3:AbortMultipartUpload"
        - "s3:GetObject"
        - "s3:DeleteObject"
        - "s3:PutObject"
        - "s3:ListMultipartUploadParts"
    - resources:
        - 'arn:aws:s3:::k3s-tempo*'
      actions:
        - "s3:CreateBucket"
        - "s3:DeleteBucket"
        - "s3:GetBucketLocation"
        - "s3:ListBucket"
        - "s3:ListBucketMultipartUploads"
      conditions:
        - StringEquals: '"aws:username": "tempo"'
        - IpAddress: |
            "aws:SourceIp": [
              "10.0.0.0/8",
              "192.168.40.0/24"
            ]

- name: k3s-velero
  statements:
    - effect: Allow
      resources:
        - 'arn:aws:s3:::k3s-velero*/*'
      actions:
        - "s3:AbortMultipartUpload"
        - "s3:GetObject"
        - "s3:DeleteObject"
        - "s3:PutObject"
        - "s3:ListMultipartUploadParts"
    - resources:
        - 'arn:aws:s3:::k3s-velero*'
      actions:
        - "s3:CreateBucket"
        - "s3:DeleteBucket"
        - "s3:GetBucketLocation"
        - "s3:ListBucket"
        - "s3:ListBucketMultipartUploads"
      conditions:
        - StringEquals: '"aws:username": "velero"'
        - IpAddress: |
            "aws:SourceIp": [
              "10.0.0.0/8",
              "192.168.40.0/24"
            ]

## Additional Annotations for the Kubernetes Job makePolicyJob
makePolicyJob:
  securityContext:
    enabled: false
    runAsUser: 1000
    runAsGroup: 1000
  resources:
    requests:
      memory: 128Mi
  # Command to run after the main command on exit
  exitCommand: ""

makeServiceAccountJob:
  securityContext:
    enabled: false
    runAsUser: 1000
    runAsGroup: 1000
  resources:
    requests:
      memory: 128Mi
  # Command to run after the main command on exit
  exitCommand: ""

oidc:
  enabled: false
  configUrl: "https://identity-provider-url/.well-known/openid-configuration"
  clientId: "minio"
  clientSecret: ""
  # Provide existing client secret from the Kubernetes Secret resource, existing secret will have priority over `clientId` and/or `clientSecret``
  existingClientSecretName: ""
  existingClientIdKey: ""
  existingClientSecretKey: ""
  claimName: "policy"
  scopes: "openid,profile,email"
  redirectUri: "https://console-endpoint-url/oauth_callback"
  # Can leave empty
  claimPrefix: ""
  comment: ""
  displayName: ""

## Specify the service account to use for the MinIO pods. If 'create' is set to 'false'
## and 'name' is left unspecified, the account 'default' will be used.
serviceAccount:
  create: true
  ## The name of the service account to use. If 'create' is 'true', a service account with that name
  ## will be created.
  name: "minio"

metrics:
  serviceMonitor:
    enabled: true
    includeNode: true
    public: true
    additionalLabels: {}
    annotations: {}
    relabelConfigs: {}
    relabelConfigsCluster: # {}
      metricRelabelings:
      - regex: (server|pod)
        action: labeldrop
    namespace: ~
    interval: 30s
    scrapeTimeout: 10s

## ETCD settings: https://github.com/minio/minio/blob/master/docs/sts/etcd.md
## Define endpoints to enable this section.
etcd:
  endpoints: []
  pathPrefix: ""
  corednsPathPrefix: ""
  clientCert: ""
  clientCertKey: ""

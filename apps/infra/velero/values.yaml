replicas: 1
updateStrategy:
  type: RollingUpdate

# annotations:
#   prometheus.io/scrape: "true"

initContainers:
- name: velero-plugin-for-aws
  image: velero/velero-plugin-for-aws:v1.10.1
  imagePullPolicy: IfNotPresent
  volumeMounts:
  - mountPath: /target
    name: plugins

resources:
  requests:
    cpu: 500m
    memory: 128Mi
  limits:
    cpu: 1000m
    memory: 512Mi

# Resource requests/limits to specify for the upgradeCRDs job pod. Need to be adjusted by user accordingly.
upgradeJobResources:
  requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 256Mi

configuration:
  features: EnableCSI, EnableAPIGroupVersions

  backupStorageLocation:
  - name: minio
    # default: true
    provider: aws
    bucket: k3s-velero
    # validationFrequency: 10m0s
    accessMode: ReadWrite
    credential:
      name: velero-secret
      key: cloud
    config:
      profile: "minio" # "default"
      region: us-east-1
      s3ForcePathStyle: true
      s3Url: http://192.168.40.17:9000 # http://minio.minio.svc:9000
      checksumAlgorithm: "CRC32"
      tagging: ""

  volumeSnapshotLocation:
  - name: minio
    provider: aws
    credential:
      name: velero-secret
      key: cloud
    config:
      region: us-east-1
      profile: "minio" # "default"

  repositoryMaintenanceJob:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1024Mi
    # Number of latest maintenance jobs to keep for each repository
    latestJobsCount: 3

credentials:
  useSecret: true
  existingSecret: velero-secret

snapshotsEnabled: true
backupsEnabled: true
deployNodeAgent: true
upgradeCRDs: true

# Settings for Velero's prometheus metrics. Enabled by default.
metrics:
  enabled: true
  scrapeInterval: 30s
  scrapeTimeout: 10s

  # service metdata if metrics are enabled
  service:
    annotations: {}
    labels: {}

  # Pod annotations for Prometheus
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8085"
    prometheus.io/path: "/metrics"

  serviceMonitor:
    autodetect: true
    enabled: false
    annotations: {}
    additionalLabels: {}
    # ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
    metricRelabelings: []
    relabelings: []
    namespace:
    scheme: ""

# Whether to deploy the node-agent daemonset.
deployNodeAgent: false

nodeAgent:
  podVolumePath: /var/lib/kubelet/pods
  # Pod priority class name to use for the node-agent daemonset. Optional.
  priorityClassName: ""
  # Resource requests/limits to specify for the node-agent daemonset deployment. Optional.
  # https://velero.io/docs/v1.6/customize-installation/#customize-resource-requests-and-limits
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1024Mi
  tolerations: []
  annotations: {}
  labels: {}
  useScratchEmptyDir: true
  extraVolumes: []
  extraVolumeMounts: []
  extraEnvVars: {}
  extraArgs: []
  dnsPolicy: ClusterFirst
  podSecurityContext:
    runAsUser: 0
    # fsGroup: 1337
  containerSecurityContext: {}
  lifecycle: {}
  nodeSelector: {}
  affinity: {}
  dnsConfig: {}

# Backup schedules to create.
# Eg:
# schedules:
#   mybackup:
#     disabled: false
#     labels:
#       myenv: foo
#     annotations:
#       myenv: foo
#     schedule: "0 0 * * *"
#     useOwnerReferencesInBackup: false
#     paused: false
#     template:
#       ttl: "240h"
#       storageLocation: default
#       includedNamespaces:
#       - foo
#       # See: https://velero.io/docs/v1.14/resource-filtering/#excludes
#       excludedNamespaceScopedResources:
#       - persistentVolumeClaims
#       excludedClusterScopedResources:
#       - persistentVolumes
schedules: {}

# Velero ConfigMaps.
# Eg:
# configMaps:
    # See: https://velero.io/docs/v1.11/file-system-backup/
#   fs-restore-action-config:
#     labels:
#       velero.io/plugin-config: ""
#       velero.io/pod-volume-restore: RestoreItemAction
#     data:
#       image: velero/velero-restore-helper:v1.10.2
#       cpuRequest: 200m
#       memRequest: 128Mi
#       cpuLimit: 200m
#       memLimit: 128Mi
#       secCtx: |
#         capabilities:
#           drop:
#           - ALL
#           add: []
#         allowPrivilegeEscalation: false
#         readOnlyRootFilesystem: true
#         runAsUser: 1001
#         runAsGroup: 999
configMaps: {}



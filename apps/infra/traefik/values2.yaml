# helm repo add traefik https://helm.traefik.io/traefik
image:
  pullPolicy: Always

commonLabels: {}
deployment:
  enabled: true
  kind: Deployment
  replicas: 1
  revisionHistoryLimit: 10
  terminationGracePeriodSeconds: 60
  minReadySeconds: 0
  annotations: {}
  labels: {}
  podAnnotations: {}
  podLabels: {}
  additionalContainers: []
  additionalVolumes: []
  # additionalVolumes:
  # - name: plugins
  # - name: traefik-logs

  # initContainers: []
  initContainers:
    - name: data-accesslog
      image: busybox:latest
      args:
        - /bin/sh
        - -c
        - tail -n+1 -F /data/access.log
      imagePullPolicy: Always
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - name: data
        mountPath: /data

  shareProcessNamespace: true # false
  dnsConfig: {}
  hostAliases: []
  imagePullSecrets: []
  lifecycle: {}
  runtimeClassName:

podDisruptionBudget:
  enabled: false
  # maxUnavailable: 1
  # maxUnavailable: 33%
  # minAvailable: 0
  # minAvailable: 25%

# -- Create a default IngressClass for Traefik
ingressClass:
  enabled: true
  isDefaultClass: true
  name: traefik-external

# Traefik experimental features
# experimental:
#   http3:
#     enabled: false
#   plugins:
#     enabled: false
#     fail2ban:
#       moduleName: "github.com/tomMoulard/fail2ban"
#       version: "v0.8.3"
#     crowdsec-bouncer-traefik-plugin:
#       moduleName: "github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin"
#       version: "v1.3.3"

  kubernetesGateway:
    # -- Enable traefik experimental GatewayClass CRD
    enabled: false

ingressRoute:
  dashboard:
    # -- Create an IngressRoute for the dashboard
    enabled: false
    # -- Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class)
    annotations: {}
    # -- Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels)
    labels: {}
    # -- The router match rule used for the dashboard ingressRoute
    matchRule: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
    # -- The internal service used for the dashboard ingressRoute
    services:
      - name: api@internal
        kind: TraefikService
    # -- Specify the allowed entrypoints to use for the dashboard ingress route, (e.g. traefik, web, websecure).
    # By default, it's using traefik entrypoint, which is not exposed.
    # /!\ Do not expose your dashboard without any protection over the internet /!\
    entryPoints: ["traefik"]
    # -- Additional ingressRoute middlewares (e.g. for authentication)
    middlewares: []
    # -- TLS options (e.g. secret containing certificate)
    tls: {}
  healthcheck:
    # -- Create an IngressRoute for the healthcheck probe
    enabled: false
    # -- Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class)
    annotations: {}
    # -- Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels)
    labels: {}
    # -- The router match rule used for the healthcheck ingressRoute
    matchRule: PathPrefix(`/ping`)
    # -- The internal service used for the healthcheck ingressRoute
    services:
      - name: ping@internal
        kind: TraefikService
    # -- Specify the allowed entrypoints to use for the healthcheck ingress route, (e.g. traefik, web, websecure).
    # By default, it's using traefik entrypoint, which is not exposed.
    entryPoints: ["traefik"]
    # -- Additional ingressRoute middlewares (e.g. for authentication)
    middlewares: []
    # -- TLS options (e.g. secret containing certificate)
    tls: {}

updateStrategy:
  # -- Customize updateStrategy: RollingUpdate or OnDelete
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 1

readinessProbe:
  failureThreshold: 1
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2
livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2

providers:
  kubernetesCRD:
    enabled: true
    allowCrossNamespace: true
    allowExternalNameServices: true
    allowEmptyServices: true
    ingressClass: traefik-external
    labelSelector: [] # labelSelector: "app=traefik" # environment=production,method=traefik # -- Array of namespaces to watch. If left empty, Traefik watches all namespaces.
    namespaces: [] # "argocd,cert-manager,default,dev,monitoring,prod,traefik,infra,longhorn-system,media,iot,iot-k3s,backup,storage,minio"

  kubernetesIngress:
    enabled: true
    allowExternalNameServices: true
    # -- Allows to return 503 when there is no endpoints available
    allowEmptyServices: true
    # -- When ingressClass is set, only Ingresses containing an annotation with the same value are processed. Otherwise, Ingresses missing the annotation, having an empty value, or the value traefik are processed.
    ingressClass: traefik-external
    # labelSelector: environment=production,method=traefik
    namespaces: [] # "argocd,cert-manager,default,dev,monitoring,prod,traefik,infra,longhorn-system,media,iot,iot-k3s,backup,storage,minio"
    # IP used for Kubernetes Ingress endpoints
    publishedService:
      enabled: false
      # Published Kubernetes Service to copy status from. Format: namespace/servicename
      # By default this Traefik service
      pathOverride: traefik-system/traefik
    # -- Defines whether to use Native Kubernetes load-balancing mode by default.
    nativeLBByDefault:

  kubernetesGateway:
    enabled: false
    experimentalChannel: false
    # -- Array of namespaces t watch. If left empty, Traefik watches all namespaces.
    namespaces: []
    # labelselector:

  file:
    enabled: false
    watch: true
    # -- File content (YAML format, go template supported) (see https://doc.traefik.io/traefik/providers/file/)
    content: []


volumes: # []
- mountPath: /data
  name: traefik-logs
  type: configMap
# - name: '{{ printf "%s-configs" .Release.Name }}'
#   mountPath: "/config"
#   type: configMap
# - name: public-cert
#   mountPath: "/certs"
#   type: secret
# - name: crowdsec-bouncer-tls
#   mountPath: /etc/traefik/crowdsec-certs/
#   type: secret

# -- Additional volumeMounts to add to the Traefik container
additionalVolumeMounts: []
# - name: traefik-logs
#   mountPath: /var/log/traefik
# - name: plugins
#   mountPath: /plugins-storage

logs:
  general:
    # -- Set [logs format](https://doc.traefik.io/traefik/observability/logs/#format)
    format:
    # -- Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
    level: INFO
    # filePath: "/var/log/traefik/traefik.log
    # noColor: true
  access:
    # -- To enable access logs
    enabled: true
    # -- Set [access log format](https://doc.traefik.io/traefik/observability/access-logs/#format)
    format:
    # filePath: "/var/log/traefik/access.log
    # -- Set [bufferingSize](https://doc.traefik.io/traefik/observability/access-logs/#bufferingsize)
    bufferingSize:
    # -- Set [filtering](https://docs.traefik.io/observability/access-logs/#filtering)
    filters:
      statuscodes: "400-405,500"
      minDuration: "10ms"
    # -- Enables accessLogs for internal resources. Default: false.
    addInternals:
    fields:
      general:
        # -- Available modes: keep, drop, redact.
        defaultmode: keep
        # -- Names of the fields to limit.
        names: {}
        ## Examples:
        # ClientUsername: drop
      # -- [Limit logged fields or headers](https://doc.traefik.io/traefik/observability/access-logs/#limiting-the-fieldsincluding-headers)
      headers:
        # -- Available modes: keep, drop, redact.
        defaultmode: drop
        names: {}

metrics:
  ## -- Enable metrics for internal resources. Default: false
  # addInternals: false

  prometheus:
    entryPoint: metrics
    addEntryPointsLabels: true
    addInternals: true
    addRoutersLabels: true
    addServicesLabels: true
    manualRouting: true
    buckets: "0.5,1.0,2.5"
    # headerLabels:
    #   label: headerKey
    #   useragent: User-Agent

    service:
      enabled: true
      labels:
        app: traefik
        release: kube-prometheus-stack
        prometheus.io/scrap-with: kube-prometheus-stack

    disableAPICheck: true
    serviceMonitor:
      enabled: true
      jobLabel: app.kubernetes.io/name
      interval: 30s
      honorLabels: true
      namespaceSelector:
        matchNames:
        - traefik
      namespace: traefik
      # selector:
      #   matchLabels:
      #     app: traefik
      # endpoints:
      # - interval: 30s
      #   port: "9100"
      #   path: /metrics


      metricRelabelings:
        - sourceLabels: [__name__]
          separator: ;
          regex: ^fluentd_output_status_buffer_(oldest|newest)_.+
          replacement: $1
          action: drop
      relabelings:
        - sourceLabels: [__meta_kubernetes_pod_node_name]
          separator: ;
          regex: ^(.*)$
          targetLabel: nodename
          replacement: $1
          action: replace

    prometheusRule:
      enabled: true
      rules:
        - alert: TraefikDown
          expr: up{job="traefik"} == 0
          for: 5m
          labels:
            context: traefik
            severity: warning
          annotations:
            summary: "Traefik Down"
            description: "{{ $labels.pod }} on {{ $labels.nodename }} is down"

  #  datadog:
  #    ## Address instructs exporter to send metrics to datadog-agent at this address.
  #    address: "127.0.0.1:8125"
  #    ## The interval used by the exporter to push metrics to datadog-agent. Default=10s
  #    # pushInterval: 30s
  #    ## The prefix to use for metrics collection. Default="traefik"
  #    # prefix: traefik
  #    ## Enable metrics on entry points. Default=true
  #    # addEntryPointsLabels: false
  #    ## Enable metrics on routers. Default=false
  #    # addRoutersLabels: true
  #    ## Enable metrics on services. Default=true
  #    # addServicesLabels: false
  #  influxdb2:
  #    ## Address instructs exporter to send metrics to influxdb v2 at this address.
  #    address: localhost:8086
  #    ## Token with which to connect to InfluxDB v2.
  #    token: xxx
  #    ## Organisation where metrics will be stored.
  #    org: ""
  #    ## Bucket where metrics will be stored.
  #    bucket: ""
  #    ## The interval used by the exporter to push metrics to influxdb. Default=10s
  #    # pushInterval: 30s
  #    ## Additional labels (influxdb tags) on all metrics.
  #    # additionalLabels:
  #    #   env: production
  #    #   foo: bar
  #    ## Enable metrics on entry points. Default=true
  #    # addEntryPointsLabels: false
  #    ## Enable metrics on routers. Default=false
  #    # addRoutersLabels: true
  #    ## Enable metrics on services. Default=true
  #    # addServicesLabels: false
  #  statsd:
  #    ## Address instructs exporter to send metrics to statsd at this address.
  #    address: localhost:8125
  #    ## The interval used by the exporter to push metrics to influxdb. Default=10s
  #    # pushInterval: 30s
  #    ## The prefix to use for metrics collection. Default="traefik"
  #    # prefix: traefik
  #    ## Enable metrics on entry points. Default=true
  #    # addEntryPointsLabels: false
  #    ## Enable metrics on routers. Default=false
  #    # addRoutersLabels: true
  #    ## Enable metrics on services. Default=true
  #    # addServicesLabels: false
  otlp:
    # -- Set to true in order to enable the OpenTelemetry metrics
    enabled: false
    # -- Enable metrics on entry points. Default: true
    addEntryPointsLabels:
    # -- Enable metrics on routers. Default: false
    addRoutersLabels:
    # -- Enable metrics on services. Default: true
    addServicesLabels:
    # -- Explicit boundaries for Histogram data points. Default: [.005, .01, .025, .05, .1, .25, .5, 1, 2.5, 5, 10]
    explicitBoundaries:
    # -- Interval at which metrics are sent to the OpenTelemetry Collector. Default: 10s
    pushInterval:
    http:
      # -- Set to true in order to send metrics to the OpenTelemetry Collector using HTTP.
      enabled: false
      # -- Format: <scheme>://<host>:<port><path>. Default: http://localhost:4318/v1/metrics
      endpoint:
      # -- Additional headers sent with metrics by the reporter to the OpenTelemetry Collector.
      headers:
      ## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.
      tls:
        # -- The path to the certificate authority, it defaults to the system bundle.
        ca:
        # -- The path to the public certificate. When using this option, setting the key option is required.
        cert:
        # -- The path to the private key. When using this option, setting the cert option is required.
        key:
        # -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.
        insecureSkipVerify:
    grpc:
      # -- Set to true in order to send metrics to the OpenTelemetry Collector using gRPC
      enabled: false
      # -- Format: <scheme>://<host>:<port><path>. Default: http://localhost:4318/v1/metrics
      endpoint:
      # -- Allows reporter to send metrics to the OpenTelemetry Collector without using a secured protocol.
      insecure:
      ## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.
      tls:
        # -- The path to the certificate authority, it defaults to the system bundle.
        ca:
        # -- The path to the public certificate. When using this option, setting the key option is required.
        cert:
        # -- The path to the private key. When using this option, setting the cert option is required.
        key:
        # -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.
        insecureSkipVerify:

## Tracing
# -- https://doc.traefik.io/traefik/observability/tracing/overview/
tracing:
  # -- Enables tracing for internal resources. Default: false.
  addInternals:
  otlp:
    # -- See https://doc.traefik.io/traefik/v3.0/observability/tracing/opentelemetry/
    enabled: false
    http:
      # -- Set to true in order to send metrics to the OpenTelemetry Collector using HTTP.
      enabled: false
      # -- Format: <scheme>://<host>:<port><path>. Default: http://localhost:4318/v1/metrics
      endpoint:
      # -- Additional headers sent with metrics by the reporter to the OpenTelemetry Collector.
      headers:
      ## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.
      tls:
        # -- The path to the certificate authority, it defaults to the system bundle.
        ca:
        # -- The path to the public certificate. When using this option, setting the key option is required.
        cert:
        # -- The path to the private key. When using this option, setting the cert option is required.
        key:
        # -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.
        insecureSkipVerify:
    grpc:
      # -- Set to true in order to send metrics to the OpenTelemetry Collector using gRPC
      enabled: false
      # -- Format: <scheme>://<host>:<port><path>. Default: http://localhost:4318/v1/metrics
      endpoint:
      # -- Allows reporter to send metrics to the OpenTelemetry Collector without using a secured protocol.
      insecure:
      ## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.
      tls:
        # -- The path to the certificate authority, it defaults to the system bundle.
        ca:
        # -- The path to the public certificate. When using this option, setting the key option is required.
        cert:
        # -- The path to the private key. When using this option, setting the cert option is required.
        key:
        # -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.
        insecureSkipVerify:

# -- Global command arguments to be passed to all traefik's pods
globalArguments:
- "--global.checknewversion=false"
- "--global.sendanonymoususage=false"

# -- Additional arguments to be passed at Traefik's binary
# See [CLI Reference](https://docs.traefik.io/reference/static-configuration/cli/)
# Use curly braces to pass values: `helm install --set="additionalArguments={--providers.kubernetesingress.ingressclass=traefik-internal,--log.level=DEBUG}"`
additionalArguments:
- "--api.dashboard=true"
- "--api.insecure=true"
- "--ping=true"
# - "--accesslog.filepath=/data/access.log"
- "--entrypoints.websecure.http.tls=true"
- "--serversTransport.insecureSkipVerify=true"
- "--entryPoints.web.proxyProtocol.insecure"  # < --- for Hass
- "--entryPoints.web.forwardedHeaders.insecure"   # < --- for Hass

# -- Environment variables to be passed to Traefik's binary
# @default -- See _values.yaml_
env:
- name: POD_NAME
  valueFrom:
    fieldRef:
      fieldPath: metadata.name
- name: POD_NAMESPACE
  valueFrom:
    fieldRef:
      fieldPath: metadata.namespace

# -- Environment variables to be passed to Traefik's binary from configMaps or secrets
envFrom: []

ports:
  ping:
    port: 8081
  traefik:
    port: 9000
    expose:
      default: true
    exposedPort: 9000
    protocol: TCP
  web:
    redirectTo:
      port: websecure
    port: 80
    expose:
      default: true
    exposedPort: 80
    protocol: TCP
  websecure:
    port: 443
    expose:
      default: true
    exposedPort: 443
    protocol: TCP
    # http3:
    #   enabled: true
    # advertisedPort: 4443
    # middlewares: []
  metrics:
    port: 9100
    expose:
      default: true
    exposedPort: 9100
    protocol: TCP

service:
  enabled: true
  single: true
  type: LoadBalancer
  annotations:
    kube-vip.io/loadbalancerIPs: "192.168.40.180"
    # metallb.universe.tf/loadBalancerIPs: "192.168.40.180"
    # service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    # service.beta.kubernetes.io/aws-load-balancer-type: nlb
    # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    # service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    # service.beta.kubernetes.io/aws-load-balancer-scheme: "internal"  # only available via VPN to internal networks

  annotationsTCP: {}
  annotationsUDP: {}
  labels: {}
  # spec:
  #   loadBalancerIP: 192.168.40.180 # this should be an IP in the MetalLB range
      # loadBalancerSourceRanges: []
        # - 192.168.0.1/32
        # - 172.16.0.0/16
  ## -- Class of the load balancer implementation
  # loadBalancerClass: service.k8s.aws/nlb
  externalIPs: []

# tls:
#   stores:
#     default:
#       defaultCertificate:
#         secretName: letsencrypt-production
#   options:
#     name: tls-ver13

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 60
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60

persistence:
  enabled: true
  name: data
  # existingClaim: "pvc-traefik"
  accessMode: ReadWriteOnce
  size: 1Gi
  storageClass: "local-path"
  volumeName: traefik-logs
  # path: /data
  # annotations: {}
  # subPath: ""

# -- Certificates resolvers configuration.
# Ref: https://doc.traefik.io/traefik/https/acme/#certificate-resolvers
# See EXAMPLES.md for more details.
certResolvers: {}
hostNetwork: false

# -- Whether Role Based Access Control objects like roles and rolebindings should be created
rbac:
  enabled: true
  # When set to true:
  # 1. Use `Role` and `RoleBinding` instead of `ClusterRole` and `ClusterRoleBinding`.
  # 2. Set `disableIngressClassLookup` on Kubernetes Ingress providers with Traefik Proxy v3 until v3.1.1
  # 3. Set `disableClusterScopeResources` on Kubernetes Ingress and CRD providers with Traefik Proxy v3.1.2+
  # **NOTE**: `IngressClass`, `NodePortLB` and **Gateway** provider cannot be used with namespaced RBAC.
  # See [upstream documentation](https://doc.traefik.io/traefik/providers/kubernetes-ingress/#disableclusterscoperesources) for more details.
  namespaced: false
  # Enable user-facing roles
  # https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles
  # aggregateTo: [ "admin" ]
  # List of Kubernetes secrets that are accessible for Traefik. If empty, then access is granted to every secret.
  secretResourceNames: []

# -- Enable to create a PodSecurityPolicy and assign it to the Service Account via RoleBinding or ClusterRoleBinding
podSecurityPolicy:
  enabled: false

# -- The service account the pods will use to interact with the Kubernetes API
serviceAccount:
  # If set, an existing service account is used
  # If not set, a service account is created automatically using the fullname template
  name: ""

# -- Additional serviceAccount annotations (e.g. for oidc authentication)
serviceAccountAnnotations: {}

# -- [Resources](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) for `traefik` container.
resources:
  requests:
    cpu: 100m
    memory: 50Mi
  limits:
    cpu: 300m
    memory: 150Mi

# -- This example pod anti-affinity forces the scheduler to put traefik pods
# -- on nodes where no other traefik pods are scheduled.
# It should be used when hostNetwork: true to prevent port conflicts
affinity: {}
#  podAntiAffinity:
#    requiredDuringSchedulingIgnoredDuringExecution:
#      - labelSelector:
#          matchLabels:
#            app.kubernetes.io/name: '{{ template "traefik.name" . }}'
#            app.kubernetes.io/instance: '{{ .Release.Name }}-{{ .Release.Namespace }}'
#        topologyKey: kubernetes.io/hostname

nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
# This example topologySpreadConstraints forces the scheduler to put traefik pods
# on nodes where no other traefik pods are scheduled.
#  - labelSelector:
#      matchLabels:
#        app: '{{ template "traefik.name" . }}'
#    maxSkew: 1
#    topologyKey: kubernetes.io/hostname
#    whenUnsatisfiable: DoNotSchedule

# -- [Pod Priority and Preemption](https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/)
priorityClassName: "system-cluster-critical"

# -- [SecurityContext](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context-1)
# @default -- See _values.yaml_
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true

# -- [Pod Security Context](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context)
# @default -- See _values.yaml_
podSecurityContext:
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532

# -- Extra objects to deploy (value evaluated as a template)
#
# In some cases, it can avoid the need for additional, extended or adhoc deployments.
# See #595 for more details and traefik/tests/values/extra.yaml for example.
extraObjects: []

# This will override the default Release Namespace for Helm.
# It will not affect optional CRDs such as `ServiceMonitor` and `PrometheusRules`
namespaceOverride: traefik
# This will override the default app.kubernetes.io/instance label for all Objects.
instanceLabelOverride: traefik

# Traefik Hub configuration. See https://doc.traefik.io/traefik-hub/
hub:
  # -- Name of `Secret` with key 'token' set to a valid license token.
  # It enables API Gateway.
  token:
  apimanagement:
    # -- Set to true in order to enable API Management. Requires a valid license token.
    enabled:
    admission:
      # -- WebHook admission server listen address. Default: "0.0.0.0:9943".
      listenAddr:
      # -- Certificate of the WebHook admission server. Default: "hub-agent-cert".
      secretName:

  ratelimit:
    redis:
      # -- Enable Redis Cluster. Default: true.
      cluster:
      # -- Database used to store information. Default: "0".
      database:
      # -- Endpoints of the Redis instances to connect to. Default: "".
      endpoints:
      # -- The username to use when connecting to Redis endpoints. Default: "".
      username:
      # -- The password to use when connecting to Redis endpoints. Default: "".
      password:
      sentinel:
        # -- Name of the set of main nodes to use for main selection. Required when using Sentinel. Default: "".
        masterset:
        # -- Username to use for sentinel authentication (can be different from endpoint username). Default: "".
        username:
        # -- Password to use for sentinel authentication (can be different from endpoint password). Default: "".
        password:
      # -- Timeout applied on connection with redis. Default: "0s".
      timeout:
      tls:
        # -- Path to the certificate authority used for the secured connection.
        ca:
        # -- Path to the public certificate used for the secure connection.
        cert:
        # -- Path to the private key used for the secure connection.
        key:
        # -- When insecureSkipVerify is set to true, the TLS connection accepts any certificate presented by the server. Default: false.
        insecureSkipVerify:
  # Enable export of errors logs to the platform. Default: true.
  sendlogs:

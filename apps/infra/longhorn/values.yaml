global:
  tolerations: []
  nodeSelector: {}
  # cattle:
  #   systemDefaultRegistry: ""
  #   windowsCluster:
  #     enabled: false
  #     tolerations:
  #     - key: "cattle.io/os"
  #       value: "linux"
  #       effect: "NoSchedule"
  #       operator: "Equal"
  #     nodeSelector:
  #       kubernetes.io/os: "linux"
  #     defaultSetting:
  #       taintToleration: cattle.io/os=linux:NoSchedule
  #       systemManagedComponentsNodeSelector: kubernetes.io/os:linux

networkPolicies:
  enabled: false
  type: "k3s"

service:
  ui:
    type: ClusterIP
    nodePort: null
  manager:
    type: ClusterIP
    nodePort: ""

persistence:
  defaultClass: true
  defaultFsType: ext4
  defaultMkfsParams: "-I 256 -b 4096 -O ^metadata_csum,^64bit"
  defaultClassReplicaCount: 1
  defaultDataLocality: disabled
  reclaimPolicy: Delete
  migratable: false
  disableRevisionCounter: "true"
  nfsOptions: "hard,timeo=50,retrans=1"
  recurringJobSelector:
    enable: false
    jobList: []
  backingImage:
    enable: false
  defaultDiskSelector:
    enable: true
    selector: "data,fast"
  defaultNodeSelector:
    enable: true
    selector: "fast,storage"
  removeSnapshotsDuringFilesystemTrim: enabled

preUpgradeChecker:
  jobEnabled: false
  upgradeVersionCheck: false

csi:
  kubeletRootDir: ~
  attacherReplicaCount: ~
  provisionerReplicaCount: ~
  resizerReplicaCount: ~
  snapshotterReplicaCount: ~

defaultSettings:
  backupTarget: s3://k3s-longhorn-backup@us-east-1/
  backupTargetCredentialSecret: s3-backup
  allowRecurringJobWhileVolumeDetached: false
  createDefaultDiskLabeledNodes: true
  defaultDataPath: /mnt/data
  defaultDataLocality: best-effort
  replicaSoftAntiAffinity: ~
  replicaAutoBalance: ~
  storageOverProvisioningPercentage: ~
  storageMinimalAvailablePercentage: 5
  storageReservedPercentageForDefaultDisk: 5
  upgradeChecker: false
  defaultReplicaCount: 1
  defaultLonghornStaticStorageClass: longhorn
  backupstorePollInterval: ~
  failedBackupTTL: ~
  restoreVolumeRecurringJobs: enabled
  recurringSuccessfulJobsHistoryLimit: ~
  recurringFailedJobsHistoryLimit: ~
  recurringJobMaxRetention: ~
  supportBundleFailedHistoryLimit: ~
  taintToleration: node-role.kubernetes.io/master:NoSchedule
  systemManagedComponentsNodeSelector: ~
  priorityClass: &defaultPriorityClassNameRef "longhorn-critical"
  # autoSalvage: true
  # autoDeletePodWhenVolumeDetachedUnexpectedly: true
  disableSchedulingOnCordonedNode: ~
  replicaZoneSoftAntiAffinity: ~
  replicaDiskSoftAntiAffinity: ~
  nodeDownPodDeletionPolicy: delete-both-statefulset-and-deployment-pod
  nodeDrainPolicy: always-allow
  detachManuallyAttachedVolumesWhenCordoned: ~
  replicaReplenishmentWaitInterval: ~
  concurrentReplicaRebuildPerNodeLimit: ~
  concurrentVolumeBackupRestorePerNodeLimit: 5
  # disableRevisionCounter: true
  systemManagedPodsImagePullPolicy: if-not-present
  # allowVolumeCreationWithDegradedAvailability: true
  # autoCleanupSystemGeneratedSnapshot: true
  # autoCleanupRecurringJobBackupSnapshot: true
  concurrentAutomaticEngineUpgradePerNodeLimit: ~
  backingImageCleanupWaitInterval: 60
  backingImageRecoveryWaitInterval: 4
  guaranteedInstanceManagerCPU: ~
  kubernetesClusterAutoscalerEnabled: ~
  # orphanAutoDeletion: true
  storageNetwork: ~
  deletingConfirmationFlag: ~
  engineReplicaTimeout: 10
  snapshotDataIntegrity: ~
  snapshotDataIntegrityImmediateCheckAfterSnapshotCreation: ~
  snapshotDataIntegrityCronjob: ~
  # removeSnapshotsDuringFilesystemTrim: true
  fastReplicaRebuildEnabled: ~
  replicaFileSyncHttpClientTimeout: ~
  longGRPCTimeOut: ~
  logLevel: ~
  backupCompressionMethod: ~
  backupConcurrentLimit: 10
  restoreConcurrentLimit: 2
  v1DataEngine: ~
  v2DataEngine: ~
  v2DataEngineHugepageLimit: ~
  v2DataEngineGuaranteedInstanceManagerCPU: ~
  allowEmptyNodeSelectorVolume: ~
  allowEmptyDiskSelectorVolume: ~
  allowCollectingLonghornUsageMetrics: ~
  disableSnapshotPurge: ~
  snapshotMaxCount: 10
  v2DataEngineLogLevel: ~
  v2DataEngineLogFlags: ~
  # freezeFilesystemForSnapshot: true
  # autoCleanupSnapshotWhenDeleteBackup: true
  rwxVolumeFastFailover: ~

privateRegistry:
  createSecret: ~
  registryUrl: ~
  registryUser: ~
  registryPasswd: ~
  registrySecret: ~

longhornManager:
  log:
    format: plain
  priorityClass: *defaultPriorityClassNameRef
  tolerations:
  - key: ""
    operator: "Exists"
    effect: "NoSchedule"

  nodeSelector: {}
  serviceAnnotations: {}

longhornDriver:
  priorityClass: *defaultPriorityClassNameRef
  tolerations:
  - key: ""
    operator: "Exists"
    effect: "NoSchedule"
  nodeSelector: {}

longhornUI:
  replicas: 1
  priorityClass: *defaultPriorityClassNameRef
  tolerations: []
  nodeSelector: {}

enablePSP: false
namespaceOverride: ""
annotations:
  prometheus.io/scrape: "true"

serviceAccount:
  annotations: {}

metrics:
  serviceMonitor:
    enabled: false
    additionalLabels: {}
    annotations: {}
    interval: ""
    scrapeTimeout: ""
    relabelings: []
    metricRelabelings: []

openshift:
  enabled: false
enableGoCoverDir: false
